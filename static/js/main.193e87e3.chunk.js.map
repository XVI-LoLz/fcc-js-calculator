{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["buttons","value","id","type","App","React","useState","display","setDisplay","allowDecimal","setAllowDecimal","lastCharacter","length","handleClick","updatedValue","inputs","operations","a","b","numbers","operators","forEach","element","match","push","console","log","pop","Number","shift","unshift","toString","calculate","str","split","toArray","slice","className","map","key","onClick","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.193e87e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst buttons = [\r\n  {\r\n    value: 'C',\r\n    id: 'clear',\r\n    type: 'ui'\r\n  },\r\n  {\r\n    value: '/',\r\n    id: 'divide',\r\n    type: 'operator'\r\n  },\r\n  {\r\n    value: '*',\r\n    id: 'multiply',\r\n    type: 'operator'\r\n  },\r\n  {\r\n    value: '-',\r\n    id: 'subtract',\r\n    type: 'operator'\r\n  },\r\n  {\r\n    value: '0',\r\n    id: 'zero',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '1',\r\n    id: 'one',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '2',\r\n    id: 'two',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '3',\r\n    id: 'three',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '4',\r\n    id: 'four',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '5',\r\n    id: 'five',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '6',\r\n    id: 'six',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '7',\r\n    id: 'seven',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '8',\r\n    id: 'eight',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '9',\r\n    id: 'nine',\r\n    type: 'number'\r\n  },\r\n  {\r\n    value: '+',\r\n    id: 'add',\r\n    type: 'operator'\r\n  },\r\n\r\n  {\r\n    value: '=',\r\n    id: 'equals'\r\n  },\r\n  {\r\n    value: '.',\r\n    id: 'decimal',\r\n    type: 'number'\r\n  },\r\n]\r\n\r\nfunction calculate(inputs){\r\n  const operations = {\r\n    '+': (a,b) => (a + b),\r\n    '-': (a,b) => (a - b),\r\n    '*': (a,b) => (a * b),\r\n    '/': (a,b) => (a / b),\r\n  }\r\n\r\n  let numbers = []\r\n  let operators = []\r\n\r\n  inputs.forEach(element => {\r\n    if(element.match(/[0-9]$/)){\r\n      numbers.push(element)\r\n      console.log('numbers ' + numbers)\r\n    }else{\r\n      if(element === ''){\r\n        operators.pop()\r\n        return\r\n      }\r\n      operators.push(element)\r\n      console.log('operators ' + operators)\r\n    }\r\n  });\r\n\r\n  while(numbers.length > 1){\r\n    const a = Number(numbers.shift())\r\n    const b = Number(numbers.shift())\r\n    numbers.unshift(operations[operators.shift()](a,b))\r\n    console.log('calculated numbers: '+ numbers)\r\n  }\r\n  return numbers.toString()\r\n}\r\n\r\nfunction toArray(str){\r\n  const operatorRegex = /([+*/]|(?<![+*/])-)/\r\n  let inputs = []\r\n  inputs = str.split(operatorRegex)\r\n  console.log(`Numbers: ${inputs}`)\r\n  return inputs;\r\n}\r\n\r\nfunction App() {\r\n  const [ display, setDisplay ] = React.useState('0')\r\n  const [ allowDecimal, setAllowDecimal ] = React.useState(true)\r\n  \r\n  const lastCharacter = () => {\r\n    return display[display.length-1]\r\n  }\r\n\r\n  const handleClick = (value) => {\r\n    if(value === '=') {\r\n      const updatedValue = calculate(toArray(display))\r\n      setDisplay(updatedValue)\r\n      setAllowDecimal(true)\r\n      console.log('display '+ display)\r\n      console.log(allowDecimal)\r\n      return\r\n    }\r\n\r\n    if(value === 'C') {\r\n      setDisplay('0')\r\n      setAllowDecimal(true)\r\n      return\r\n    }\r\n\r\n    if(value.match(/[+\\-*/]/) && !allowDecimal){\r\n      setAllowDecimal(true)\r\n    }\r\n\r\n    if(value === '.'){\r\n      console.log('point')\r\n      if(allowDecimal === true){\r\n        setDisplay(display + value)\r\n        setAllowDecimal(false)\r\n      }\r\n      return\r\n    }\r\n\r\n    if(display === '0'){\r\n      if( value.match(/[0-9]/)) return setDisplay(value)\r\n      if( value.match(/[+*/]/)) return\r\n      if( value === '.') return setDisplay('0.')\r\n    }\r\n\r\n    if(\r\n      value.match(/[0-9]/)\r\n      || (lastCharacter().match(/[0-9]/) && value.match(/[+\\-*/]/)) \r\n      || (value.match(/[-]/) && display.slice(-2).match(/(?<=[0-9])[*/]/))\r\n    )\r\n    {\r\n      setDisplay(display + value)\r\n    }else if(\r\n      (display.slice(-2).match(/[+-]/) && value.match(/[+\\-*/]/))\r\n      || (lastCharacter().match(/[+*/]/) && value.match(/[+*/]/))\r\n    ){\r\n      setDisplay(display.slice(0,-1) + value)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id='calculator'>\r\n        <div id='display'>{display}</div>\r\n\r\n        <div id='pad'>\r\n          {buttons.map( ({value, id, type}) => (\r\n            <div key={id} id={id} className={`button ${type} ${id}`} onClick={() => handleClick(value)}>{value}</div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}